diff --git a/tml.h b/tml.h
index d8e11f8..6a5c613 100644
--- a/tml.h
+++ b/tml.h
@@ -160,7 +160,11 @@ TMLDEF tml_message* tml_load_tsf_stream(struct tsf_stream* stream);
 #endif
 
 #ifndef TML_NO_STDIO
-#  include <stdio.h>
+#  ifdef __cplusplus
+#    include <cstdio>
+#  else
+#    include <stdio.h>
+#  endif
 #endif
 
 #define TML_NULL 0
@@ -186,7 +190,7 @@ extern "C" {
 #endif
 
 #ifndef TML_NO_STDIO
-static int tml_stream_stdio_read(FILE* f, void* ptr, unsigned int size) { return (int)fread(ptr, 1, size, f); }
+static int tml_stream_stdio_read(void* f, void* ptr, unsigned int size) { return (int)fread(ptr, 1, size, (FILE*)f); }
 TMLDEF tml_message* tml_load_filename(const char* filename)
 {
 	struct tml_message* res;
@@ -280,9 +284,13 @@ static int tml_parsemessage(tml_message** f, struct tml_parser* p)
 	if (p->message_array_size == p->message_count)
 	{
 		//start allocated memory size of message array at 64, double each time until 8192, then add 1024 entries until done
+		size_t old_array_size = p->message_array_size;
 		p->message_array_size += (!p->message_array_size ? 64 : (p->message_array_size > 4096 ? 1024 : p->message_array_size));
 		*f = (tml_message*)TML_REALLOC(*f, p->message_array_size * sizeof(tml_message));
 		if (!*f) { TML_ERROR("Out of memory"); return -1; }
+		for (int i = old_array_size; i < p->message_array_size; ++i) {
+		  (*f)[i].time = 0;
+		}
 	}
 	evt = *f + p->message_count;
 
@@ -357,6 +365,9 @@ static int tml_parsemessage(tml_message** f, struct tml_parser* p)
 	{
 		evt->time = deltatime;
 		p->message_count++;
+	} else {
+		TML_WARN("Unexpected deltatime of 0 and empty event type");
+		evt->time = 0;
 	}
 	return evt->type;
 }
diff --git a/tsf.h b/tsf.h
index 2926486..9f492c3 100644
--- a/tsf.h
+++ b/tsf.h
@@ -251,8 +251,12 @@ TSFDEF float tsf_channel_get_tuning(tsf* f, int channel);
 #  define TSF_SQRTF   sqrtf
 #endif
 
-#ifndef TSF_NO_STDIO
-#  include <stdio.h>
+#ifndef TSL_NO_STDIO
+#  ifdef __cplusplus
+#    include <cstdio>
+#  else
+#    include <stdio.h>
+#  endif
 #endif
 
 #define TSF_TRUE 1
@@ -294,8 +298,8 @@ struct tsf
 };
 
 #ifndef TSF_NO_STDIO
-static int tsf_stream_stdio_read(FILE* f, void* ptr, unsigned int size) { return (int)fread(ptr, 1, size, f); }
-static int tsf_stream_stdio_skip(FILE* f, unsigned int count) { return !fseek(f, count, SEEK_CUR); }
+static int tsf_stream_stdio_read(void* f, void* ptr, unsigned int size) { return (int)fread(ptr, 1, size, (FILE*)f); }
+static int tsf_stream_stdio_skip(void* f, unsigned int count) { return !fseek((FILE*)f, count, SEEK_CUR); }
 TSFDEF tsf* tsf_load_filename(const char* filename)
 {
 	tsf* res;
